We have a client-storage that fetches blobs over http.

In addition to the normal ClientStorage options, it takes an iterable
of URLs to request blobs from.

    >>> import zc.s3blobstorage.file, zc.s3blobstorage.client, ZODB, ZEO

First, we'll start a storage server, based on an s3blobstorage file
storage configuration::

    %import zc.s3blobstorage

    <s3blobfilestorage>
      path t.fs
      blob-dir blobs
    </s3blobfilestorage>

.. -> conf

    >>> addr, stop_server = ZEO.server(storage_conf=conf)

Create a blob cache directory and start a web server on it:

    >>> import os, zc.wsgidriver, bobo
    >>> os.mkdir('cache')
    >>> app = bobo.Application(
    ...     bobo_resources = "boboserver:static('', 'cache')")
    >>> blob_server_port = zc.wsgidriver.start_server(app)
    >>> blob_server = 'http://localhost:%s/' % blob_server_port


 Create a client and do some transactions:

    >>> client = zc.s3blobstorage.client.ClientStorage(
    ...     addr, blob_dir='cblobs', blob_servers=[blob_server])

    >>> db = ZODB.DB(client)
    >>> with db.transaction() as conn:
    ...     conn.root.b1 = ZODB.blob.Blob("version 1")
    >>> now += 3000
    >>> with db.transaction() as conn:
    ...     with conn.root.b1.open("w") as f:
    ...        f.write("version 2")
    >>> db.close()
    >>> import shutil
    >>> shutil.rmtree('cblobs')

Move the blobs to a separate "cache" to mimic the blob server:

    >>> for n in os.listdir('blobs'):
    ...     if n.endswith('.blob'):
    ...         os.rename(os.path.join('blobs', n), os.path.join('cache', n))

Create a new client and verify that it can get and update blobs:

    >>> db = zc.s3blobstorage.client.DB(
    ...     addr, blob_dir='cblobs', blob_servers=[blob_server])
    >>> with db.transaction() as conn:
    ...     with conn.root.b1.open() as f:
    ...        print f.read()
    version 2

    >>> len([n for n in os.listdir('blobs') if n.endswith('.blob')])
    0
    >>> with db.transaction() as conn:
    ...     with conn.root.b1.open("w") as f:
    ...        f.write("version 3")
    >>> len([n for n in os.listdir('blobs') if n.endswith('.blob')])
    1

    >>> db.close()
    >>> shutil.rmtree('cblobs')

    >>> for n in os.listdir('blobs'):
    ...     if n.endswith('.blob'):
    ...         os.rename(os.path.join('blobs', n), os.path.join('cache', n))

ZooKeeper-based configuration
=============================

We can configure clients via ZooKeeper using the ZKClientStorage
constructor. Given a ZooKeeper tree:

   /db
     /providers
        /localhost:%s
     /blobs
       /providers
          /localhost:%s

.. -> tree

A database node lists its ZEO server addresses under its ``providers``
sub-node and it's blob servers under it's ``/blobs/providers``
subnode.

    >>> import zc.zk
    >>> zk = zc.zk.ZK('zookeeper.example.com:2181')
    >>> zk.import_tree(tree % (addr[1], blob_server_port))

We only provide the database node. The subnodes are implied.

    >>> client = zc.s3blobstorage.client.ZKClientStorage(
    ...     'zookeeper.example.com:2181', '/db', blob_dir='cblobs')
    >>> db = ZODB.DB(client)

    >>> with db.transaction() as conn:
    ...     with conn.root.b1.open() as f:
    ...        print f.read()
    version 3

We can change the server address:

    >>> old_blob_server = blob_server
    >>> old_blob_server_port = blob_server_port
    >>> blob_server_port = zc.wsgidriver.start_server(app)
    >>> blob_server = 'http://localhost:%s/' % blob_server_port
    >>> import requests
    >>> _ = requests.get(old_blob_server + 'stop-testing-server')
    >>> blob_server_port != old_blob_server_port
    True
    >>> zk.import_tree(tree % (addr[1], blob_server_port), trim=True)

    >>> with db.transaction() as conn:
    ...     with conn.root.b1.open() as f:
    ...        print f.read()
    version 3

    >>> db.close()
    >>> shutil.rmtree('cblobs')


ZConfig support
===============

We can configure a zookeeper-based client using ZConfig::


    %import zc.s3blobstorage

    <zodb>
      <zks3blobclient>
        zookeeper zookeeper.example.com:2181
        server /db
        blob-dir cblobs
      </zks3blobclient>
    </zodb>

.. -> config

    >>> import ZODB.config
    >>> db = ZODB.config.databaseFromString(config)

    >>> with db.transaction() as conn:
    ...     with conn.root.b1.open() as f:
    ...        print f.read()
    version 3

    >>> db.close()
    >>> shutil.rmtree('cblobs')

to-do
=====

- ClientDisconnected exception when blob blob servers can't be connected to.

.. cleanup

    >>> stop_server()
    >>> _ = requests.get(blob_server + 'stop-testing-server')
