<component>

  <sectiontype
      name="s3blobfilestorage"
      datatype="zc.s3blobstorage.file.Config"
      implements="ZODB.storage"
      >

    <key name="path" required="yes" datatype="existing-dirpath">
      <description>
        Path name to the main storage file.  The names for
        supplemental files, including index and lock files, will be
        computed from this.
      </description>
    </key>
    <key name="blob-dir" required="no" datatype="existing-dirpath">
      <description>
        If supplied, the file storage will provide blob support and this
        is the name of a directory to hold blob data.  The directory will
        be created if it doeesn't exist.  If no value (or an empty value)
        is provided, then no blob support will be provided. (You can still
        use a BlobStorage to provide blob support.)
      </description>
    </key>
    <key name="create" datatype="boolean">
      <description>
        Flag that indicates whether the storage should be truncated if
        it already exists.
      </description>
    </key>
    <key name="read-only" datatype="boolean">
      <description>
        If true, only reads may be executed against the storage.  Note
        that the "pack" operation is not considered a write operation
        and is still allowed on a read-only filestorage.
      </description>
    </key>
    <key name="quota" datatype="byte-size">
      <description>
        Maximum allowed size of the storage file.  Operations which
        would cause the size of the storage to exceed the quota will
        result in a ZODB.FileStorage.FileStorageQuotaError being
        raised.
      </description>
    </key>
    <key name="packer" datatype="string">
      <description>
        The dotted name (dotted module name and object name) of a
        packer object.  This is used to provide an alternative pack
        implementation.
      </description>
    </key>
    <key name="pack-gc" datatype="boolean" default="true">
      <description>
         If false, then no garbage collection will be performed when
         packing.  This can make packing go much faster and can avoid
         problems when objects are referenced only from other
         databases.
      </description>
    </key>
    <key name="pack-keep-old" datatype="boolean" default="true">
      <description>
         If true, a copy of the database before packing is kept in a
         ".old" file.
      </description>
    </key>
    <key name="pack-blobs" datatype="boolean" default="true">
      <description>
         If true, then when blobs are packed, a time-stamped file
         containing oids and serial numbers is saved in the blob
         directory.
      </description>
    </key>
  </sectiontype>

</component>
